
Down the line, you may find yourself working with a company that has set up their database conventions a little bit differently, but these are the guidelines that we feel are best for this course:

make the table name plural and ALL lowercase - make it plural (ex. users, leads, sites, clients, chapters, courses, modules)
use "id" as the primary key - name it id (also make it auto-incremented).
name foreign keys with singular_table_name_id when referencing to a primary key in another table name it [singular name of the table you're referring to]_id (ex. user_id, lead_id, site_id, client_id, chapter_id, course_id, module_id).
use created_at and updated_at as columns for the timestamp in EVERY table you create.
When we do things in ORM or in Ruby on Rails, it becomes extremely important that we follow these naming conventions.

INSERT-
	INSERT INTO table_name (column_name1, column_name2) 
	VALUES('column1_value', 'column2_value');

UPDATE-
	UPDATE table_name SET column_name1 = 'some_value', column_name2='another_value' WHERE condition(s)
	IMPORTANT: if WHERE condition is not added to the UPDATE statement, the changes will be applied to every record in the table.

DELETE-
	(If you get error involving safe updates)
	SET SQL_SAFE_UPDATES = 0;

	DELETE FROM table_name WHERE condition(s)
	(IMPORTANT: if WHERE condition is not added to the DELETE statement, it will delete all the records on the table.)

FUNCTIONS-
	{When calling a function on a column, make sure that column is the appropriate Data Type for that function:

		Text Functions Data Types (VARCHAR, TEXT, CHAR etc.)

		Numeric Functions Data Types (INT, BIGINT, FLOAT etc.)

		Date and Time Functions Data Types (DATETIME)
	}
	SELECT FUNCTION (column) FROM table_name
	(Refer to picture of MySQL Functions in this same folder.

JOINING (Can potentially also use grouping functions)-
	One to One:
		SELECT * FROM customers 
		JOIN addresses ON addresses.id = customers.address_id;
		(refer to gif in same folder)
	One to Many:
		SELECT * FROM orders 
		JOIN customers ON customers.id = orders.customer_id;
		(refer to gif in same folder)
	Many to Many:
		SELECT * FROM orders 
		JOIN items_orders ON orders.id = items_orders.order_id 
		JOIN items ON items.id = items_orders.item_id;
		(refer to gif in same folder)
	The above examples are using a JOIN, also referred to as INNER JOIN. However, there may be times where you would want to use a
	different type of JOIN. Imagine that in the  One to Many relationship above there was a customer that had not yet placed an order.
	There wouldn't be a customer_id listed in the orders table. If we wanted to get the results of all the customers orders including 
	the customers that hadn't yet placed an order we would have to use a LEFT JOIN. See the visual representations of what you can
	expect to be included when using different types of joins.
	GROUPING RESULTS OF JOINING:
		there are many different ways that we might combine multiple values into a result. Below are a list of the most common ones,
		often called Grouping Functions or Aggregate Functions.  
		(refer to picture in same folder)

LEFT JOINING-
	We are joining the tables, starting from left to right, gluing each table based on the primary id and foreign key. This is why we
	set up relationships so we can do LEFT JOINs and create customized tables when we need them. 

NOTES FOR ALL JOINING-
	In the second example, Rajon is omitted from the table. When SQL uses the keyword JOIN, it only includes those records that have 	matches on both sides. It will omit any records that don't have a 'partner'. 

	On the other hand, LEFT JOIN will include all the records from the first table (the 'left' table, the first one mentioned when reading 	from left to right), regardless of whether that record has a matching foreign key in the (right) table that we are trying to join to 	it. 

	To summarize, JOIN will only include the intersection of the two tables, whereas LEFT JOIN will include all records from the first 	table, plus the records from the second table that correspond. This is why the JOIN is sometimes called the INNER JOIN, while all the 	other joins (including LEFT JOIN) are referred to as OUTER JOINs. 

EXPORTING-
	(Importance for exams):
		We would also have to export our database when we submit our belt exams so that, whoever is grading your application, can 		execute the .sql file that you provided and they can use the same database you used to work on the exam.
	Top tabs (Navigate), go to Server, Data export. Click on the database you want to export, then make sure to export to a self contained
	file. By default it will be saved in the dumps folder, but you can export it to desktop or any other folder by changing the file
	destination. Make sure to do the INCLUDE CREATE SCHEMA, so that it has the create database line. and then press export.




